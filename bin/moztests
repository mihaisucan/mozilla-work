#!/bin/bash

# $Author: Mihai Sucan <mihai.sucan@gmail.com>$
# $URL: http://www.robodesign.ro/mihai $

# Quickly run tests from various locations in the mozilla codebase.

MY_PWD="$PWD"
MY_SELF="${0##*/}"
MY_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$MY_DIR/_mozinclude"

gdb=0
dbg=0
xvfb=0
nofail=0
argslist=""

# ugly arguments parsing
expected="dir"
for i do
  case $i in
    ('-gdb')
      gdb=1
      dbg=1
      argslist="$i $argslist"
      ;;
    ('-dbg')
      dbg=1
      argslist="$i $argslist"
      ;;
    ('-xvfb')
      xvfb=1
      argslist="$i $argslist"
      ;;
    ('-nofail')
      nofail=1
      argslist="$i $argslist"
      ;;
    ('-target')
      expected="target"
      ;;
    ('-'*)
      TEST_SUITE="$i"
      expected="file"
      ;;
    ( * )
      case $expected in
        ('dir')
          CUSTOM_TEST_DIR="$i"
          expected="file"
          ;;
        ('file')
          CUSTOM_TEST_FILE="$i"
          expected="nothing"
          ;;
        ('target')
          CUSTOM_MAKE_TARGET="$i"
          if [[ ! -z "$CUSTOM_TEST_DIR" || ! -z "$TEST_SUITE" ]]
          then
            expected="file"
          else
            expected="dir"
          fi
          ;;
      esac
      ;;
  esac
done

MY_SELF_ARGS="$MY_SELF $argslist"

cd "$MY_REPO_DIR"

if [[ $dbg -eq 1 ]]
then
  OBJ_DIR="$CFG_BUILDS_DIR/$MY_REPO_NAME/dbg"
else
  OBJ_DIR="$CFG_BUILDS_DIR/$MY_REPO_NAME/opt"
fi

if [[ ! -d "$OBJ_DIR" ]]
then
  echo "folder not found: $OBJ_DIR"
  exit 1
fi

function run_self {
  $MY_SELF_ARGS $1
  self_result=$?
  if [[ $nofail -ne 1 && $self_result -ne 0 ]]
  then
    echo;
    my_notification $self_result "$MY_SELF_ARGS $1 execution failed!"
    echo "Timer: $SECONDS seconds."
    exit 1
  fi
}

function subtests_end {
  echo;
  echo "${TEST_SUITE}: It took $SECONDS seconds for the tests to run."
  exit 0
}

function run_test {
  export TEST_PATH="$1"
  currentcmd="$RUN_TEST_CMD -C $OBJ_DIR $MAKE_TARGET"
  echo;
  echo "TEST_PATH=$TEST_PATH"
  echo "$currentcmd"
  echo;
  $currentcmd
  cmd_result=$?
  if [[ $nofail -ne 1 && $cmd_result -ne 0 ]]
  then
    echo;
    my_notification $cmd_result "$TEST_PATH test failed!"
    echo "Timer: $SECONDS seconds."
    exit 1
  fi
}

# default make target
MAKE_TARGET="mochitest-browser-chrome"

case "$TEST_SUITE" in
  ( '-hud' | '-webconsole' | '-hudservice' )
    TEST_DIR="browser/devtools/webconsole/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-consoleapi' )
    run_self -dom-browser
    echo;
    run_self -dom-mochitest-general

    subtests_end
    ;;
  ( '-inspector' | '-highlighter' )
    TEST_DIR="browser/devtools/highlighter/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-si' | '-styleinspector' )
    TEST_DIR="browser/devtools/styleinspector/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-sp' | '-scratchpad' )
    if [[ ! -z "$CUSTOM_TEST_FILE" ]]
    then
      # this is a shortcut so I can run specific tests from the devtools
      # Scratchpad folder
      run_self -devtools-scratchpad "$CUSTOM_TEST_FILE"
      exit $?
    fi

    # this runs all of the known Scratchpad tests
    run_self "-sessionstore *scratchpad*js"
    echo;
    run_self -devtools-scratchpad

    subtests_end
    ;;
  ( '-devtools-scratchpad' )
    # run only the browser/devtools/scratchpad tests
    TEST_DIR="browser/devtools/scratchpad/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-srced' | '-sourceeditor' )
    TEST_DIR="browser/devtools/sourceeditor/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-styleed' | '-styleeditor' )
    TEST_DIR="browser/devtools/styleeditor/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-srced-all' )
    # run all the tests of all tools that use the Source Editor component
    run_self -srced
    echo;
    run_self -scratchpad
    echo;
    run_self -styleeditor
    echo;
    run_self -browser-debugger

    subtests_end
    ;;
  ( '-tilt' )
    TEST_DIR="browser/devtools/tilt/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-browser-debugger' )
    TEST_DIR="browser/devtools/debugger/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-toolkit-debugger' )
    TEST_DIR="toolkit/devtools/debugger/tests"
    MAKE_TARGET="xpcshell-tests"
    ;;
  ( '-jsdbg' | '-debugger' )
    # run the js debugger tests
    run_self -toolkit-debugger
    echo;
    run_self -browser-debugger

    subtests_end
    ;;
  ( '-toolkit-devtools' )
    run_self -toolkit-debugger
    exit $?
    ;;
  ( '-browser-devtools' )
    # run tests only from the browser/devtools folder
    TEST_DIR="browser/devtools"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-devtools-shared' )
    TEST_DIR="browser/devtools/shared/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-devtools' )
    # run all of the known devtools tests
    run_self -sessionstore *scratchpad*js
    echo;
    run_self -consoleapi
    echo;
    run_self -toolkit-devtools
    echo;
    run_self -browser-devtools

    subtests_end
    ;;
  ( '-toolkit-content' )
    TEST_DIR="toolkit/content/tests"
    # there are also mochitest-browser-chrome tests
    MAKE_TARGET="mochitest-chrome"
    ;;
  ( '-sessionstore' )
    TEST_DIR="browser/components/sessionstore/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-bbase' )
    TEST_DIR="browser/base/content/test"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-tabview' | '-panorama' )
    TEST_DIR="browser/base/content/test/tabview"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-prompts' )
    TEST_DIR="toolkit/components/prompts/test"
    MAKE_TARGET="mochitest-plain"
    ;;
  ( '-dom-browser' )
    TEST_DIR="dom/tests/browser"
    MAKE_TARGET="mochitest-browser-chrome"
    ;;
  ( '-dom-mochitest-general' )
    TEST_DIR="dom/tests/mochitest/general"
    MAKE_TARGET="mochitest-plain"
    ;;
esac

# override settings: allow a custom make target, even if the test suite defines 
# one
if [[ ! -z "$CUSTOM_MAKE_TARGET" ]]
then
  MAKE_TARGET="$CUSTOM_MAKE_TARGET"
fi

# same for the files filter
if [[ ! -z "$CUSTOM_TEST_FILE" ]]
then
  TEST_FILE="$CUSTOM_TEST_FILE"
fi

# the folder cannot be overriden
if [[ -z "$TEST_DIR" ]]
then
  if [[ ! -d "$MY_PWD/$CUSTOM_TEST_DIR" ]]
  then
    echo "folder not found: $CUSTOM_TEST_DIR"
    exit 1
  fi
  TEST_DIR="$(cd -P "$MY_PWD/$CUSTOM_TEST_DIR" && pwd)"
  TEST_DIR="$(relative_path $MY_REPO_DIR $TEST_DIR)"
fi

if [[ ! -d "$TEST_DIR" ]]
then
  echo "folder not found: $TEST_DIR"
  exit 1
fi


# check if the file argument is a file filter
if [[ ! -z "$TEST_FILE" ]]
then
  if [[ -f  "${TEST_DIR}/${TEST_FILE}" ]]
  then
    TEST_DIR="${TEST_DIR}/${TEST_FILE}"
  else
    FILE_FILTER="$TEST_FILE"
  fi
fi

# support running tests through gdb
if [[ $gdb -eq 1 ]]
then
  export EXTRA_TEST_ARGS='--debugger=gdb'
fi

if [[ "$MAKE_TARGET" == "xpcshell-tests" ]]
then
  export EXTRA_TEST_ARGS="$EXTRA_TEST_ARGS --keep-going"
fi

RUN_TEST_CMD="$MY_MAKE"
if [[ $xvfb -eq 1 ]]
then
  RUN_TEST_CMD="xvfb-run $RUN_TEST_CMD"
fi

if [[ -d "$TEST_DIR" && ! -z "$FILE_FILTER" ]]
then
  # use the files filter
  cd "$TEST_DIR"

  FILES=($FILE_FILTER)

  cd "$MY_REPO_DIR"

  echo;
  echo "Files matched: ${FILES[@]}"
  echo;

  found=0
  for t in "${FILES[@]}"
  do
    if [[ ! -f "${TEST_DIR}/$t" || "$t" =~ ^\. || "$t" =~ ~$ || "$t" =~ \.bak$ ]]
    then
      continue
    fi

    found=1
    run_test "${TEST_DIR}/$t"
  done

  if [[ "$found" -eq 0 ]]
  then
    echo "no files match $FILE_FILTER in $TEST_DIR"
    exit 1
  fi

  echo;
  echo "$TEST_SUITE $TEST_DIR ${FILE_FILTER}: It took $SECONDS seconds for the tests to run."
  exit 0

else
  run_test "$TEST_DIR"

  echo;
  echo "$TEST_SUITE ${TEST_DIR}: It took $SECONDS seconds for the tests to run."
fi
