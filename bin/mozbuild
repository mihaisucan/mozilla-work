#!/bin/bash

# Quickly start dbg/opt mozilla firefox builds.

MY_SELF="${0##*/}"
MY_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$MY_DIR/_mozinclude"

dbg=0
clobber=0
configure=0
both=0
argslist=""
use_smartmake=0
b2g=0
fennec=0
do_install=0
do_package=0
mach_args=""

for i do
  case $i in
    ('-dbg')
      dbg=1
      ;;
    ('-clobber')
      clobber=1
      argslist="$i $argslist"
      ;;
    ('-configure')
      configure=1
      argslist="$i $argslist"
      ;;
    ('-smart' | '-inc')
      use_smartmake=1
      argslist="$i $argslist"
      ;;
    ('-nosmart' | '-noinc' | '-full' | '-f')
      use_smartmake=0
      argslist="$i $argslist"
      ;;
    ('-both')
      both=1
      ;;
    ('-b2g')
      b2g=1
      argslist="$i $argslist"
      ;;
    ('-fennec')
      fennec=1
      argslist="$i $argslist"
      ;;
    ('-install')
      do_install=1
      argslist="$i $argslist"
      ;;
    ('-package')
      do_package=1
      argslist="$i $argslist"
      ;;
    ( * )
      mach_args="$mach_args $i"
      ;;
  esac
done

if [[ "$both" -eq 1 ]]
then
  $MY_SELF $argslist
  if [[ "$?" -ne 0 ]]
  then
    exit $?
  fi
  $MY_SELF -dbg $argslist
  dbgresult="$?"
  echo "Total time: $SECONDS seconds"
  exit $dbgresult
fi

if [[ ! -d "$CFG_BUILDS_DIR" ]]
then
  echo "folder not found: $CFG_BUILDS_DIR"
  exit 1
fi

if [[ "$CFG_BUILD_CLANG" -eq 1 ]]
then
  export CC='clang -Qunused-arguments -fcolor-diagnostics -w'
  export CXX='clang++ -Qunused-arguments -fcolor-diagnostics -w'
fi
export MOZ_PSEUDO_DERECURSE=1

cd "$MY_REPO_DIR"

if [[ ! -f client.mk ]]
then
  echo "file not found: client.mk"
  exit 1
fi

if [[ ! -d "$CFG_BUILDS_DIR" ]]
then
  echo "folder not found: $CFG_BUILDS_DIR"
  exit 0
fi

prepare_moz_env $dbg $b2g $fennec

if [[ ! -f "$MOZCONFIG" ]]
then
  echo "file not found: $MOZCONFIG"
  exit 1
fi

if [[ $clobber -eq 1 ]]
then
  rm -r "$MOZ_OBJDIR"
  rm_result=$?
  if [[ $rm_result -eq 0 ]]
  then
    echo "Build $buildtype clobbered, removed $MOZ_OBJDIR"
  fi
  exit $rm_result
fi

function the_end {
  if [[ "$1" -eq 0 ]]
  then
    my_notification $1 "${MY_REPO_NAME}: $mozapp $buildtype $2 ready."
  else
    my_notification $1 "${MY_REPO_NAME}: $mozapp $buildtype $2 failed."
  fi
  echo "Timer: $SECONDS seconds."
  exit $1
}

if [[ $configure -eq 1 ]]
then
  $MY_MAKE configure
  the_end $? "configure"
fi

if [[ $fennec -eq 1 && $do_package -eq 1 ]]
then
  $MY_MAKE package
  the_end $? "package"
fi

if [[ $fennec -eq 1 && $do_install -eq 1 ]]
then
  $MY_ADB uninstall "org.mozilla.fennec_$USER"
  $MY_ADB install -r "$MOZ_OBJDIR"/dist/fennec-*.apk
  the_end $? "install"
fi

buildtimestamp="${SMARTMAKE_TIMESTAMP}-${mozapp}-$buildtype"

if [[ $use_smartmake -eq 1 ]]
then
  if [[ ! -f "$SMARTMAKE_CONFIG" ]]
  then
    echo "[smartmake]" > "$SMARTMAKE_CONFIG"
    echo "cmd=$SMARTMAKE_CMD" >> "$SMARTMAKE_CONFIG"
  fi
  if [[ -f "$buildtimestamp" ]]
  then
    cp "$buildtimestamp" "$SMARTMAKE_TIMESTAMP"
  fi
  mozsmartmake.py
  make_result=$?
  cp "$SMARTMAKE_TIMESTAMP" "$buildtimestamp"
else
  $MY_MAKE build $mach_args
  make_result=$?
  if [[ "$make_result" -eq 0 && -f "$SMARTMAKE_TIMESTAMP" ]]
  then
    if [[ "$MY_OS" == "Darwin" ]]
    then
      date -u > "$SMARTMAKE_TIMESTAMP"
    else
      date -u -R > "$SMARTMAKE_TIMESTAMP"
    fi
    cp "$SMARTMAKE_TIMESTAMP" "$buildtimestamp"
  fi
fi

if [[ $fennec -eq 1 && $make_result -eq 0 ]]
then
  $MY_SELF -fennec -package
  make_result=$?
  if [[ $make_result -eq 0 ]]
  then
    $MY_SELF -fennec -install
    make_result=$?
  fi
fi

the_end $make_result "build"
